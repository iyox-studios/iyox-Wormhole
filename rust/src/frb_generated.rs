// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.8.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1217042098;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__default_rendezvous_url_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "default_rendezvous_url",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::default_rendezvous_url())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__default_transit_url_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "default_transit_url",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::default_transit_url())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__init_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::init();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__init_backend_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_backend",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_temp_file_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::init_backend(api_temp_file_path);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__request_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "request_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_code = <String>::sse_decode(&mut deserializer);
            let api_storage_folder = <String>::sse_decode(&mut deserializer);
            let api_server_config = <crate::api::ServerConfig>::sse_decode(&mut deserializer);
            let api_actions = <StreamSink<
                crate::wormhole::types::t_update::TUpdate,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::request_file(
                            api_code,
                            api_storage_folder,
                            api_server_config,
                            api_actions,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__send_files_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_files",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_file_paths = <Vec<String>>::sse_decode(&mut deserializer);
            let api_name = <String>::sse_decode(&mut deserializer);
            let api_code_length = <u8>::sse_decode(&mut deserializer);
            let api_server_config = <crate::api::ServerConfig>::sse_decode(&mut deserializer);
            let api_actions = <StreamSink<
                crate::wormhole::types::t_update::TUpdate,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::send_files(
                            api_file_paths,
                            api_name,
                            api_code_length,
                            api_server_config,
                            api_actions,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode
    for StreamSink<
        crate::wormhole::types::t_update::TUpdate,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::wormhole::types::value::ConnectionType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wormhole::types::value::ConnectionType::Relay,
            1 => crate::wormhole::types::value::ConnectionType::Direct,
            _ => unreachable!("Invalid variant for ConnectionType: {}", inner),
        };
    }
}

impl SseDecode for crate::wormhole::types::error_types::ErrorType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wormhole::types::error_types::ErrorType::InvalidFilename,
            1 => crate::wormhole::types::error_types::ErrorType::NoFilePathFound,
            2 => crate::wormhole::types::error_types::ErrorType::ConnectionError,
            3 => crate::wormhole::types::error_types::ErrorType::FileRequestError,
            4 => crate::wormhole::types::error_types::ErrorType::FileOpen,
            5 => crate::wormhole::types::error_types::ErrorType::TransferError,
            6 => crate::wormhole::types::error_types::ErrorType::TransferConnectionError,
            7 => crate::wormhole::types::error_types::ErrorType::ZipFileError,
            8 => crate::wormhole::types::error_types::ErrorType::ParseCodeError,
            _ => unreachable!("Invalid variant for ErrorType: {}", inner),
        };
    }
}

impl SseDecode for crate::wormhole::types::events::Events {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wormhole::types::events::Events::Code,
            1 => crate::wormhole::types::events::Events::Total,
            2 => crate::wormhole::types::events::Events::Sent,
            3 => crate::wormhole::types::events::Events::Error,
            4 => crate::wormhole::types::events::Events::Connecting,
            5 => crate::wormhole::types::events::Events::Finished,
            6 => crate::wormhole::types::events::Events::ConnectionType,
            7 => crate::wormhole::types::events::Events::StartTransfer,
            8 => crate::wormhole::types::events::Events::ZipFilesTotal,
            9 => crate::wormhole::types::events::Events::ZipFiles,
            _ => unreachable!("Invalid variant for Events: {}", inner),
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::ServerConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_rendezvousUrl = <String>::sse_decode(deserializer);
        let mut var_transitUrl = <String>::sse_decode(deserializer);
        return crate::api::ServerConfig {
            rendezvous_url: var_rendezvousUrl,
            transit_url: var_transitUrl,
        };
    }
}

impl SseDecode for crate::wormhole::types::t_update::TUpdate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_event = <crate::wormhole::types::events::Events>::sse_decode(deserializer);
        let mut var_value = <crate::wormhole::types::value::Value>::sse_decode(deserializer);
        return crate::wormhole::types::t_update::TUpdate {
            event: var_event,
            value: var_value,
        };
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::wormhole::types::value::Value {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::wormhole::types::value::Value::Int(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::wormhole::types::value::Value::String(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <crate::wormhole::types::error_types::ErrorType>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                return crate::wormhole::types::value::Value::ErrorValue(var_field0, var_field1);
            }
            3 => {
                let mut var_field0 =
                    <crate::wormhole::types::error_types::ErrorType>::sse_decode(deserializer);
                return crate::wormhole::types::value::Value::Error(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <crate::wormhole::types::value::ConnectionType>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                return crate::wormhole::types::value::Value::ConnectionType(
                    var_field0, var_field1,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        3 => wire__crate__api__init_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__request_file_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__send_files_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__default_rendezvous_url_impl(ptr, rust_vec_len, data_len),
        2 => wire__crate__api__default_transit_url_impl(ptr, rust_vec_len, data_len),
        4 => wire__crate__api__init_backend_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::wormhole::types::value::ConnectionType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Relay => 0.into_dart(),
            Self::Direct => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::wormhole::types::value::ConnectionType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::wormhole::types::value::ConnectionType>
    for crate::wormhole::types::value::ConnectionType
{
    fn into_into_dart(self) -> crate::wormhole::types::value::ConnectionType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::wormhole::types::error_types::ErrorType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::InvalidFilename => 0.into_dart(),
            Self::NoFilePathFound => 1.into_dart(),
            Self::ConnectionError => 2.into_dart(),
            Self::FileRequestError => 3.into_dart(),
            Self::FileOpen => 4.into_dart(),
            Self::TransferError => 5.into_dart(),
            Self::TransferConnectionError => 6.into_dart(),
            Self::ZipFileError => 7.into_dart(),
            Self::ParseCodeError => 8.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::wormhole::types::error_types::ErrorType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::wormhole::types::error_types::ErrorType>
    for crate::wormhole::types::error_types::ErrorType
{
    fn into_into_dart(self) -> crate::wormhole::types::error_types::ErrorType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::wormhole::types::events::Events {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Code => 0.into_dart(),
            Self::Total => 1.into_dart(),
            Self::Sent => 2.into_dart(),
            Self::Error => 3.into_dart(),
            Self::Connecting => 4.into_dart(),
            Self::Finished => 5.into_dart(),
            Self::ConnectionType => 6.into_dart(),
            Self::StartTransfer => 7.into_dart(),
            Self::ZipFilesTotal => 8.into_dart(),
            Self::ZipFiles => 9.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::wormhole::types::events::Events
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::wormhole::types::events::Events>
    for crate::wormhole::types::events::Events
{
    fn into_into_dart(self) -> crate::wormhole::types::events::Events {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::ServerConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.rendezvous_url.into_into_dart().into_dart(),
            self.transit_url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::ServerConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::ServerConfig> for crate::api::ServerConfig {
    fn into_into_dart(self) -> crate::api::ServerConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::wormhole::types::t_update::TUpdate {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.event.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::wormhole::types::t_update::TUpdate
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::wormhole::types::t_update::TUpdate>
    for crate::wormhole::types::t_update::TUpdate
{
    fn into_into_dart(self) -> crate::wormhole::types::t_update::TUpdate {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::wormhole::types::value::Value {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::wormhole::types::value::Value::Int(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wormhole::types::value::Value::String(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wormhole::types::value::Value::ErrorValue(field0, field1) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wormhole::types::value::Value::Error(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wormhole::types::value::Value::ConnectionType(field0, field1) => [
                4.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::wormhole::types::value::Value
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::wormhole::types::value::Value>
    for crate::wormhole::types::value::Value
{
    fn into_into_dart(self) -> crate::wormhole::types::value::Value {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode
    for StreamSink<
        crate::wormhole::types::t_update::TUpdate,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::wormhole::types::value::ConnectionType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::wormhole::types::value::ConnectionType::Relay => 0,
                crate::wormhole::types::value::ConnectionType::Direct => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::wormhole::types::error_types::ErrorType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::wormhole::types::error_types::ErrorType::InvalidFilename => 0,
                crate::wormhole::types::error_types::ErrorType::NoFilePathFound => 1,
                crate::wormhole::types::error_types::ErrorType::ConnectionError => 2,
                crate::wormhole::types::error_types::ErrorType::FileRequestError => 3,
                crate::wormhole::types::error_types::ErrorType::FileOpen => 4,
                crate::wormhole::types::error_types::ErrorType::TransferError => 5,
                crate::wormhole::types::error_types::ErrorType::TransferConnectionError => 6,
                crate::wormhole::types::error_types::ErrorType::ZipFileError => 7,
                crate::wormhole::types::error_types::ErrorType::ParseCodeError => 8,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::wormhole::types::events::Events {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::wormhole::types::events::Events::Code => 0,
                crate::wormhole::types::events::Events::Total => 1,
                crate::wormhole::types::events::Events::Sent => 2,
                crate::wormhole::types::events::Events::Error => 3,
                crate::wormhole::types::events::Events::Connecting => 4,
                crate::wormhole::types::events::Events::Finished => 5,
                crate::wormhole::types::events::Events::ConnectionType => 6,
                crate::wormhole::types::events::Events::StartTransfer => 7,
                crate::wormhole::types::events::Events::ZipFilesTotal => 8,
                crate::wormhole::types::events::Events::ZipFiles => 9,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::ServerConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.rendezvous_url, serializer);
        <String>::sse_encode(self.transit_url, serializer);
    }
}

impl SseEncode for crate::wormhole::types::t_update::TUpdate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::wormhole::types::events::Events>::sse_encode(self.event, serializer);
        <crate::wormhole::types::value::Value>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::wormhole::types::value::Value {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wormhole::types::value::Value::Int(field0) => {
                <i32>::sse_encode(0, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::wormhole::types::value::Value::String(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::wormhole::types::value::Value::ErrorValue(field0, field1) => {
                <i32>::sse_encode(2, serializer);
                <crate::wormhole::types::error_types::ErrorType>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
            }
            crate::wormhole::types::value::Value::Error(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::wormhole::types::error_types::ErrorType>::sse_encode(field0, serializer);
            }
            crate::wormhole::types::value::Value::ConnectionType(field0, field1) => {
                <i32>::sse_encode(4, serializer);
                <crate::wormhole::types::value::ConnectionType>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.8.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.8.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
